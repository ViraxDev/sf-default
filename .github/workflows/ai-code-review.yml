name: Contextual AI Code Review with Correct Review Comment Creation
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: true

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install anthropic requests
          sudo apt-get install -y gh jq

      - name: AI Code Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pr_number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 <<EOF
          import os
          import sys
          import subprocess
          import json
          import requests
          from anthropic import Anthropic

          def log(message):
              print(f"DEBUG: {message}")
              sys.stdout.flush()

          def run_command(command):
              try:
                  result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
                  return result.stdout.strip()
              except subprocess.CalledProcessError as e:
                  log(f"Error executing command: {e}")
                  log(f"Command output: {e.output}")
                  return None

          def create_review_comment(repo, pr_number, body, path, commit_id, position):
              url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}/comments"
              headers = {
                  "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
                  "Accept": "application/vnd.github.v3+json"
              }
              data = {
                  "body": body,
                  "path": path,
                  "commit_id": commit_id,
                  "position": position
              }
              response = requests.post(url, headers=headers, json=data)
              if response.status_code == 201:
                  log("Review comment posted successfully")
              else:
                  log(f"Error posting review comment. Status code: {response.status_code}")
                  log(f"Response content: {response.text}")

          def get_project_structure():
              return run_command("tree -L 3 -d")

          def get_changed_files_with_diff(pr_number, repo):
              url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}"
              headers = {
                  "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
                  "Accept": "application/vnd.github.v3.diff"
              }
              response = requests.get(url, headers=headers)
              if response.status_code != 200:
                  log(f"Error fetching diff from GitHub API. Status code: {response.status_code}")
                  return None
              diff_output = response.text

              files = []
              current_file = None
              current_hunk = []
              position = 0
          
              for line in diff_output.split('\n'):
                  position += 1
                  if line.startswith('diff --git'):
                      if current_file:
                          files.append(current_file)
                      current_file = {'path': line.split()[-1][2:], 'hunks': [], 'position': position}
                  elif line.startswith('@@'):
                      if current_hunk:
                          current_file['hunks'].append({'content': '\n'.join(current_hunk), 'position': current_file['position']})
                          current_hunk = []
                      current_hunk = [line]
                      current_file['position'] = position
                  elif current_hunk:
                      current_hunk.append(line)
          
              if current_file and current_hunk:
                  current_file['hunks'].append({'content': '\n'.join(current_hunk), 'position': current_file['position']})
                  files.append(current_file)
          
              return files

          log("Starting Contextual AI Code Review with Correct Review Comment Creation")

          api_key = os.environ['ANTHROPIC_API_KEY']
          anthropic = Anthropic(api_key=api_key)
          
          pr_number = os.environ['PR_NUMBER']
          repo = os.environ['GITHUB_REPOSITORY']

          project_structure = get_project_structure()

          changed_files = get_changed_files_with_diff(pr_number, repo)
          if changed_files is None:
              log("Error: Unable to fetch diff")
              sys.exit(1)

          pr_info_command = f"gh pr view {pr_number} --json title,body,commits"
          pr_info = json.loads(run_command(pr_info_command))
          
          for file in changed_files:
              filename = file['path']
              log(f"Reviewing changes in file: {filename}")

              prompt = f"""As an AI code reviewer, provide a concise and precise review for the changes in the following file:

              Project structure:
              {project_structure}

              Pull Request:
              Title: {pr_info['title']}
              Description: {pr_info['body']}
              Number of commits: {len(pr_info['commits'])}

              File being reviewed: {filename}

              Changes:
              {chr(10).join([hunk['content'] for hunk in file['hunks']])}

              Focus on:
              1. Code quality and adherence to project standards
              2. Potential issues or regressions introduced by these changes
              3. How well the changes integrate with the existing codebase
              4. Brief improvement suggestions (if necessary)

              Keep your review concise, ideally within 3-4 short sentences."""

              log("Sending request to Anthropic API")
              try:
                  response = anthropic.messages.create(
                      model="claude-3-opus-20240229",
                      max_tokens=150,
                      messages=[
                          {"role": "user", "content": prompt}
                      ]
                  )
                  log("Received response from Anthropic API")
                  log(f"Response content: {response.content[0].text}")
                  review = response.content[0].text.strip()
          
                  if not review or "I apologize" in review:
                      log("Error: Received empty or apologetic review from Anthropic API")
                      continue
          
              except Exception as e:
                  log(f"Error calling Anthropic API: {str(e)}")
                  continue

              log("Posting review comment on GitHub")
              create_review_comment(
                  repo,
                  pr_number,
                  review,
                  filename,
                  pr_info['commits'][-1]['oid'],
                  file['position']
              )

          log("Contextual AI Code Review with Correct Review Comment Creation completed")
          EOF