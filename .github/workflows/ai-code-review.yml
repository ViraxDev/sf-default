name: AI Code Review with src Context
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: true

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install anthropic requests
          sudo apt-get install -y gh jq

      - name: AI Code Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pr_number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 <<EOF
          import os
          import sys
          import subprocess
          import json
          import requests
          from anthropic import Anthropic

          def log(message):
              print(f"DEBUG: {message}")
              sys.stdout.flush()

          def run_command(command):
              try:
                  result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
                  return result.stdout.strip()
              except subprocess.CalledProcessError as e:
                  log(f"Error executing command: {e}")
                  log(f"Command output: {e.output}")
                  return None

          def create_review(repo, pr_number, commit_id, body, comments):
              url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}/reviews"
              headers = {
                  "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
                  "Accept": "application/vnd.github.v3+json"
              }
              data = {
                  "commit_id": commit_id,
                  "body": body,
                  "event": "COMMENT",
                  "comments": comments
              }
              response = requests.post(url, headers=headers, json=data)
              if response.status_code == 200:
                  log("Review posted successfully")
              else:
                  log(f"Error posting review. Status code: {response.status_code}")
                  log(f"Response content: {response.text}")

          def get_src_content():
              src_content = {}
              for root, dirs, files in os.walk('src'):
                  for file in files:
                      if file.endswith('.php'):
                          file_path = os.path.join(root, file)
                          with open(file_path, 'r') as f:
                              src_content[file_path] = f.read()
              return src_content

          def get_project_context():
              context = {
                  "src_structure": run_command("tree src -L 3"),
                  "src_content": get_src_content()
              }
              return json.dumps(context)

          def get_changed_files_with_diff(pr_number, repo):
              url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}/files"
              headers = {
                  "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
                  "Accept": "application/vnd.github.v3+json"
              }
              response = requests.get(url, headers=headers)
              if response.status_code != 200:
                  log(f"Error fetching files from GitHub API. Status code: {response.status_code}")
                  return None
              return response.json()

          log("Starting AI Code Review with src Context")

          api_key = os.environ['ANTHROPIC_API_KEY']
          anthropic = Anthropic(api_key=api_key)
          
          pr_number = os.environ['PR_NUMBER']
          repo = os.environ['GITHUB_REPOSITORY']

          project_context = get_project_context()

          changed_files = get_changed_files_with_diff(pr_number, repo)
          if changed_files is None:
              log("Error: Unable to fetch changed files")
              sys.exit(1)

          pr_info_command = f"gh pr view {pr_number} --json title,body,commits"
          pr_info = json.loads(run_command(pr_info_command))

          file_comments = []

          for file in changed_files:
              filename = file['filename']
              patch = file['patch']
              log(f"Reviewing changes in file: {filename}")

              prompt = f"""As an AI code reviewer with access to the src directory of the project, provide a concise and precise review for the changes in the following file:

              Project Context: {project_context}

              Pull Request:
              Title: {pr_info['title']}
              Description: {pr_info['body']}
              Number of commits: {len(pr_info['commits'])}

              File being reviewed: {filename}
              Changes:
              {patch}

              Provide a brief, focused review that:
              1. Addresses code quality and potential issues
              2. Considers project standards and existing codebase
              3. Suggests improvements if necessary
              4. Identifies any potential conflicts or inconsistencies with other parts of the project

              Keep your review under 100 words, without any titles or unnecessary formatting."""

              log("Sending request to Anthropic API")
              try:
                  response = anthropic.messages.create(
                      model="claude-3-opus-20240229",
                      max_tokens=150,
                      messages=[
                          {"role": "user", "content": prompt}
                      ]
                  )
                  log("Received response from Anthropic API")
                  review = response.content[0].text.strip()
          
                  file_comments.append({
                      "path": filename,
                      "position": file['additions'],
                      "body": review
                  })
          
              except Exception as e:
                  log(f"Error calling Anthropic API: {str(e)}")
                  continue

          log("Posting review on GitHub")
          create_review(
              repo,
              pr_number,
              pr_info['commits'][-1]['oid'],
              "AI Code Review completed. See individual file comments for details.",
              file_comments
          )

          log("AI Code Review with src Context completed")
          EOF