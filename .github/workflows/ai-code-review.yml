name: Contextual AI Code Review with Enhanced Project Understanding
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: true

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install anthropic requests
          sudo apt-get install -y gh jq

      - name: AI Code Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pr_number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 <<EOF
          import os
          import sys
          import subprocess
          import json
          import requests
          from anthropic import Anthropic

          def log(message):
              print(f"DEBUG: {message}")
              sys.stdout.flush()

          def run_command(command):
              try:
                  result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
                  return result.stdout.strip()
              except subprocess.CalledProcessError as e:
                  log(f"Error executing command: {e}")
                  log(f"Command output: {e.output}")
                  return None

          def create_review(repo, pr_number, commit_id, body, comments):
              url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}/reviews"
              headers = {
                  "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
                  "Accept": "application/vnd.github.v3+json"
              }
              data = {
                  "commit_id": commit_id,
                  "body": body,
                  "event": "COMMENT",
                  "comments": comments
              }
              response = requests.post(url, headers=headers, json=data)
              if response.status_code == 200:
                  log("Review posted successfully")
              else:
                  log(f"Error posting review. Status code: {response.status_code}")
                  log(f"Response content: {response.text}")

          def get_project_structure():
              return run_command("tree -L 3 -d")

          def get_project_dependencies():
              return run_command("cat composer.json") or "No composer.json found"

          def get_changed_files_with_diff(pr_number, repo):
              url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}/files"
              headers = {
                  "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
                  "Accept": "application/vnd.github.v3+json"
              }
              response = requests.get(url, headers=headers)
              if response.status_code != 200:
                  log(f"Error fetching files from GitHub API. Status code: {response.status_code}")
                  return None
              return response.json()

          log("Starting Contextual AI Code Review with Enhanced Project Understanding")

          api_key = os.environ['ANTHROPIC_API_KEY']
          anthropic = Anthropic(api_key=api_key)
          
          pr_number = os.environ['PR_NUMBER']
          repo = os.environ['GITHUB_REPOSITORY']

          project_structure = get_project_structure()
          project_dependencies = get_project_dependencies()

          changed_files = get_changed_files_with_diff(pr_number, repo)
          if changed_files is None:
              log("Error: Unable to fetch changed files")
              sys.exit(1)

          pr_info_command = f"gh pr view {pr_number} --json title,body,commits"
          pr_info = json.loads(run_command(pr_info_command))

          overall_review = ""
          file_comments = []

          for file in changed_files:
              filename = file['filename']
              patch = file['patch']
              log(f"Reviewing changes in file: {filename}")

              prompt = f"""As an AI code reviewer with full access to the project repository, provide a thorough review for the changes in the following file:

              Project structure:
              {project_structure}

              Project dependencies:
              {project_dependencies}

              Pull Request:
              Title: {pr_info['title']}
              Description: {pr_info['body']}
              Number of commits: {len(pr_info['commits'])}

              File being reviewed: {filename}

              Changes:
              {patch}

              Please provide:
              1. A detailed analysis of the code changes, considering the project's overall structure and dependencies.
              2. Comments on code quality and adherence to project standards.
              3. Identification of potential issues or regressions introduced by these changes.
              4. An assessment of how well the changes integrate with the existing codebase.
              5. Specific improvement suggestions, if necessary.
              6. References to other parts of the project if relevant to your analysis.

              Additionally, please explicitly confirm that you have taken into account the full context of the project in your review.

              Format your review as a detailed markdown report."""

              log("Sending request to Anthropic API")
              try:
                  response = anthropic.messages.create(
                      model="claude-3-opus-20240229",
                      max_tokens=1000,
                      messages=[
                          {"role": "user", "content": prompt}
                      ]
                  )
                  log("Received response from Anthropic API")
                  review = response.content[0].text.strip()
                  overall_review += f"\n\n## Review for {filename}\n\n{review}"
          
                  file_comments.append({
                      "path": filename,
                      "position": file['additions'],
                      "body": f"AI Review for {filename}:\n\n{review[:500]}... (See full review in the overall comment)"
                  })
          
              except Exception as e:
                  log(f"Error calling Anthropic API: {str(e)}")
                  continue

          overall_review = f"# AI Code Review Summary\n\n{overall_review}\n\nThis review has taken into account the full context of the project, including its structure and dependencies."

          log("Posting review on GitHub")
          create_review(
              repo,
              pr_number,
              pr_info['commits'][-1]['oid'],
              overall_review,
              file_comments
          )

          log("Contextual AI Code Review with Enhanced Project Understanding completed")
          EOF