name: Manual AI Code Review
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: true

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install anthropic requests
          sudo apt-get install -y gh jq

      - name: AI Code Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pr_number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 <<EOF
          import os
          import sys
          import subprocess
          import base64
          import time
          import json
          from anthropic import Anthropic

          def log(message):
              print(f"DEBUG: {message}")
              sys.stdout.flush()

          def run_command(command):
              try:
                  result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
                  return result.stdout.strip()
              except subprocess.CalledProcessError as e:
                  log(f"Error executing command: {e}")
                  log(f"Command output: {e.output}")
                  return None

          def retry_with_exponential_backoff(func, max_retries=5, initial_delay=1, max_delay=60):
              retries = 0
              delay = initial_delay
              while retries < max_retries:
                  try:
                      return func()
                  except Exception as e:
                      log(f"Error (attempt {retries + 1}/{max_retries}): {str(e)}")
                      if retries == max_retries - 1:
                          raise
                      retries += 1
                      log(f"Retrying in {delay} seconds...")
                      time.sleep(delay)
                      delay = min(delay * 2, max_delay)

          log("Starting AI Code Review")

          api_key = os.environ['ANTHROPIC_API_KEY']
          anthropic = Anthropic(api_key=api_key)
          
          log(f"Anthropic API Key (first 5 chars): {api_key[:5]}...")

          # Test API connection
          def test_api():
              return anthropic.messages.create(
                  model="claude-3-opus-20240229",
                  max_tokens=10,
                  messages=[
                      {"role": "user", "content": "Say hello!"}
                  ]
              )

          try:
              response = retry_with_exponential_backoff(test_api)
              log(f"API connection test successful. Response: {response.content[0].text}")
          except Exception as e:
              log(f"Error testing API connection: {str(e)}")
              sys.exit(1)

          # Get changed files
          pr_number = os.environ['PR_NUMBER']
          repo = os.environ['GITHUB_REPOSITORY']
          log(f"Fetching changed files for PR #{pr_number} in repository {repo}")
          
          changed_files_command = f"gh api repos/{repo}/pulls/{pr_number}/files --jq '.[].filename'"
          changed_files_output = run_command(changed_files_command)
          
          if changed_files_output is None:
              log("Error: Unable to fetch changed files")
              sys.exit(1)
          
          changed_files = changed_files_output.split('\n')
          log(f"Changed files: {changed_files}")

          for file in changed_files:
              log(f"Reviewing file: {file}")
          
              # Fetch file content
              file_content_command = f"gh api repos/{repo}/contents/{file} --jq '.content' | base64 -d"
              file_content = run_command(file_content_command)
          
              if file_content is None:
                  log(f"Error: Unable to fetch content for file {file}")
                  continue

              log(f"File content (first 100 chars): {file_content[:100]}...")

              prompt = f"You are an AI code reviewer. Review the following file: {file}\n\nHere's the content:\n{file_content}\n\nPlease provide a thorough code review, considering:\n1. Code quality and best practices\n2. Potential bugs or issues\n3. Performance considerations\n4. How well it fits with the overall project structure\n5. Suggestions for improvement\n\nFormat your review as markdown bullet points."

              log("Sending request to Anthropic API")
              try:
                  def call_api():
                      return anthropic.messages.create(
                          model="claude-3-opus-20240229",
                          max_tokens=2000,
                          messages=[
                              {"role": "user", "content": prompt}
                          ]
                      )
          
                  response = retry_with_exponential_backoff(call_api)
                  log("Received response from Anthropic API")
                  log(f"Response content (first 100 chars): {response.content[0].text[:100]}...")
                  review = response.content[0].text
          
                  if not review.strip():
                      log("Error: Received empty review from Anthropic API")
                      continue
          
              except Exception as e:
                  log(f"Error calling Anthropic API: {str(e)}")
                  log(f"Error type: {type(e).__name__}")
                  if hasattr(e, 'response'):
                      log(f"Response status code: {e.response.status_code}")
                      log(f"Response content: {e.response.text}")
                  continue

              log("Posting comment to GitHub")
              comment_body = f"**AI Review for `{file}`:**\n\n{review}"
              encoded_comment = base64.b64encode(comment_body.encode()).decode()
              comment_command = f'echo {encoded_comment} | base64 -d | gh pr comment {pr_number} --body-file -'
              result = run_command(comment_command)
              if result is not None:
                  log("Comment posted successfully")
                  log(f"GitHub response: {result}")
              else:
                  log("Error posting comment to GitHub")

          log("AI Code Review completed")
          EOF