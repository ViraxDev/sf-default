name: Contextual AI Code Review
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: true

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install anthropic requests
          sudo apt-get install -y gh jq

      - name: AI Code Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pr_number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 <<EOF
          import os
          import sys
          import subprocess
          import base64
          import time
          import json
          from anthropic import Anthropic

          def log(message):
              print(f"DEBUG: {message}")
              sys.stdout.flush()

          def run_command(command):
              try:
                  result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
                  return result.stdout.strip()
              except subprocess.CalledProcessError as e:
                  log(f"Error executing command: {e}")
                  log(f"Command output: {e.output}")
                  return None

          def retry_with_exponential_backoff(func, max_retries=5, initial_delay=1, max_delay=60):
              retries = 0
              delay = initial_delay
              while retries < max_retries:
                  try:
                      return func()
                  except Exception as e:
                      log(f"Error (attempt {retries + 1}/{max_retries}): {str(e)}")
                      if retries == max_retries - 1:
                          raise
                      retries += 1
                      log(f"Retrying in {delay} seconds...")
                      time.sleep(delay)
                      delay = min(delay * 2, max_delay)

          log("Starting Contextual AI Code Review")

          api_key = os.environ['ANTHROPIC_API_KEY']
          anthropic = Anthropic(api_key=api_key)
          
          log(f"Anthropic API Key (first 5 chars): {api_key[:5]}...")

          # Test API connection
          def test_api():
              return anthropic.messages.create(
                  model="claude-3-opus-20240229",
                  max_tokens=10,
                  messages=[
                      {"role": "user", "content": "Say hello!"}
                  ]
              )

          try:
              response = retry_with_exponential_backoff(test_api)
              log(f"API connection test successful. Response: {response.content[0].text}")
          except Exception as e:
              log(f"Error testing API connection: {str(e)}")
              sys.exit(1)

          # Get project context
          log("Fetching project context")
          project_structure = run_command("tree -L 3 -d")
          readme_content = run_command("cat README.md") or "No README.md found"
          
          # Get changed files and their patches
          pr_number = os.environ['PR_NUMBER']
          repo = os.environ['GITHUB_REPOSITORY']
          log(f"Fetching changes for PR #{pr_number} in repository {repo}")
          
          pr_info_command = f"gh api repos/{repo}/pulls/{pr_number}"
          pr_info = json.loads(run_command(pr_info_command))
          pr_title = pr_info['title']
          pr_description = pr_info['body'] or "No description provided"
          
          files_command = f"gh api repos/{repo}/pulls/{pr_number}/files"
          files_output = run_command(files_command)
          
          if files_output is None:
              log("Error: Unable to fetch changed files")
              sys.exit(1)
          
          changed_files = json.loads(files_output)
          
          for file in changed_files:
              filename = file['filename']
              patch = file['patch']
          
              log(f"Reviewing changes in file: {filename}")
              log(f"Patch preview (first 100 chars): {patch[:100]}...")

              prompt = f"""You are an AI code reviewer. Review the following changes in the context of the entire project:

              Project structure:
              {project_structure}

              README preview:
              {readme_content[:500]}...

              Pull Request:
              Title: {pr_title}
              Description: {pr_description}

              File being reviewed: {filename}
              Changes:
              {patch}

              Please provide a thorough code review of these changes, considering:
              1. How well the changes fit with the overall project structure and purpose
              2. Code quality and adherence to best practices
              3. Potential bugs or issues introduced by these changes
              4. Performance implications
              5. Suggestions for improvement

              Format your review as markdown bullet points, focusing specifically on the changes made in this file."""

              log("Sending request to Anthropic API")
              try:
                  def call_api():
                      return anthropic.messages.create(
                          model="claude-3-opus-20240229",
                          max_tokens=2000,
                          messages=[
                              {"role": "user", "content": prompt}
                          ]
                      )
          
                  response = retry_with_exponential_backoff(call_api)
                  log("Received response from Anthropic API")
                  log(f"Response content (first 100 chars): {response.content[0].text[:100]}...")
                  review = response.content[0].text
          
                  if not review.strip():
                      log("Error: Received empty review from Anthropic API")
                      continue
          
              except Exception as e:
                  log(f"Error calling Anthropic API: {str(e)}")
                  log(f"Error type: {type(e).__name__}")
                  if hasattr(e, 'response'):
                      log(f"Response status code: {e.response.status_code}")
                      log(f"Response content: {e.response.text}")
                  continue

              log("Posting review comment on GitHub")
              review_command = f'''
              gh api repos/{repo}/pulls/{pr_number}/reviews \
                --method POST \
                --field event=COMMENT \
                --field body="{review}" \
                --field comments:='''
              review_command += '''[{
                "path": "''' + filename + '''",
                "position": ''' + str(file['changes']) + ''',
                "body": "''' + review.replace('"', '\\"').replace('\n', '\\n') + '''"
              }]
              '''
              result = run_command(review_command)
              if result is not None:
                  log("Review comment posted successfully")
                  log(f"GitHub response: {result}")
              else:
                  log("Error posting review comment to GitHub")

          log("Contextual AI Code Review completed")
          EOF