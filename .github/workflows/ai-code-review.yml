name: Concise and Precise AI Code Review
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to review'
        required: true

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install anthropic requests
          sudo apt-get install -y gh jq

      - name: AI Code Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pr_number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 <<EOF
          import os
          import sys
          import subprocess
          import json
          import requests
          import re
          from anthropic import Anthropic

          def log(message):
              print(f"DEBUG: {message}")
              sys.stdout.flush()

          def run_command(command):
              try:
                  result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
                  return result.stdout.strip()
              except subprocess.CalledProcessError as e:
                  log(f"Error executing command: {e}")
                  log(f"Command output: {e.output}")
                  return None

          def post_review_comment(repo, pr_number, body, path, commit_id, line):
              url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}/comments"
              headers = {
                  "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
                  "Accept": "application/vnd.github.v3+json"
              }
              data = {
                  "body": body,
                  "path": path,
                  "commit_id": commit_id,
                  "line": line,
                  "side": "RIGHT"
              }
              response = requests.post(url, headers=headers, json=data)
              if response.status_code == 201:
                  log("Review comment posted successfully")
              else:
                  log(f"Error posting review comment. Status code: {response.status_code}")
                  log(f"Response content: {response.text}")

          def get_changed_lines(patch):
              lines = []
              current_line = 0
              for line in patch.split('\n'):
                  if line.startswith('@@'):
                      current_line = int(line.split('+')[1].split(',')[0]) - 1
                  elif line.startswith('+'):
                      lines.append(current_line)
                  if not line.startswith('-'):
                      current_line += 1
              return lines

          log("Starting Concise and Precise AI Code Review")

          api_key = os.environ['ANTHROPIC_API_KEY']
          anthropic = Anthropic(api_key=api_key)
          
          log(f"Anthropic API Key (first 5 chars): {api_key[:5]}...")

          # Test API connection
          try:
              response = anthropic.messages.create(
                  model="claude-3-opus-20240229",
                  max_tokens=10,
                  messages=[
                      {"role": "user", "content": "Say hello!"}
                  ]
              )
              log(f"API connection test successful. Response: {response.content[0].text}")
          except Exception as e:
              log(f"Error testing API connection: {str(e)}")
              sys.exit(1)

          # Get changed files and their patches
          pr_number = os.environ['PR_NUMBER']
          repo = os.environ['GITHUB_REPOSITORY']
          log(f"Fetching changes for PR #{pr_number} in repository {repo}")
          
          pr_info_command = f"gh api repos/{repo}/pulls/{pr_number}"
          pr_info = json.loads(run_command(pr_info_command))
          commit_id = pr_info['head']['sha']
          
          files_command = f"gh api repos/{repo}/pulls/{pr_number}/files"
          files_output = run_command(files_command)
          
          if files_output is None:
              log("Error: Unable to fetch changed files")
              sys.exit(1)
          
          changed_files = json.loads(files_output)
          
          for file in changed_files:
              filename = file['filename']
              patch = file['patch']
          
              log(f"Reviewing changes in file: {filename}")
              log(f"Patch preview (first 100 chars): {patch[:100]}...")

              changed_lines = get_changed_lines(patch)
          
              for line in changed_lines:
                  prompt = f"""As an AI code reviewer, provide a concise and precise review for the following change:

                  File: {filename}
                  Line: {line}
                  Change: {next((l for l in patch.split('\n') if l.startswith('+') and not l.startswith('+++')), 'No specific line found')}

                  Focus on:
                  1. Code quality
                  2. Potential issues
                  3. Brief improvement suggestion (if necessary)

                  Keep your review extremely concise, ideally within 2-3 short sentences."""

                  log("Sending request to Anthropic API")
                  try:
                      response = anthropic.messages.create(
                          model="claude-3-opus-20240229",
                          max_tokens=100,
                          messages=[
                              {"role": "user", "content": prompt}
                          ]
                      )
                      log("Received response from Anthropic API")
                      log(f"Response content: {response.content[0].text}")
                      review = response.content[0].text.strip()
          
                      if not review:
                          log("Error: Received empty review from Anthropic API")
                          continue
          
                  except Exception as e:
                      log(f"Error calling Anthropic API: {str(e)}")
                      log(f"Error type: {type(e).__name__}")
                      if hasattr(e, 'response'):
                          log(f"Response status code: {e.response.status_code}")
                          log(f"Response content: {e.response.text}")
                      continue

                  log("Posting review comment on GitHub")
                  post_review_comment(
                      repo,
                      pr_number,
                      review,
                      filename,
                      commit_id,
                      line
                  )

          log("Concise and Precise AI Code Review completed")
          EOF